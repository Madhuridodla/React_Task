{"version":3,"sources":["redux/actions/validationMessages.js","redux/actions/types.js","redux/actions/employeesList.js","redux/actions/login.js","utlis/constants.js","utlis/commonFunctions.js","utlis/auth.js","redux/reducers/loginReducer.js","redux/reducers/index.js","store/index.js","AppRouting.jsx","App.js","serviceWorker.js","index.js"],"names":["validationMessages","PROVIDE_USERNAME","PROVIDE_VALID_USERNAME","PROVIDE_PASSWORD","PROVIDE_VALID_PASSWORD","LOGIN","EMPLOYEE_LIST","LOGOUT","employeeDetailsList","LoginActionCreator","data","dispatch","a","type","payload","EmployeesListCreator","Logout","BasicsPagesRoutes","DashboardPageRoutes","EMPLOYEES_LIST","toast","configure","validateUsername","email","RegExp","test","validatePassword","pass","showSuccessToast","msg","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","showErrorToast","error","ProtectedRoute","Component","component","rest","render","props","localStorage","getItem","document","addEventListener","event","target","readyState","window","location","href","INTIAL_STATE","loginData","employeeDetails","combineReducers","reducer","state","action","Object","assign","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistConfig","key","storage","persistedReducer","persistReducer","reducers","store","createStore","applyMiddleware","thunk","persistor","persistStore","Login","lazy","EmployeesList","AppRouting","Fragment","fallback","exact","path","App","loading","className","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4b1cebdd.chunk.js","sourcesContent":["// *************************************************************//\n//@Purpose : We can use following function to use localstorage\n//*************************************************************//\nexport const validationMessages = {\n  PROVIDE_USERNAME: \"* Please enter username\",\n  PROVIDE_VALID_USERNAME: \"* Please enter valid username/email\",\n  PROVIDE_PASSWORD: \"* Please enter password\",\n  PROVIDE_VALID_PASSWORD: \"* Please enter valid password which includes alphabet and number\"\n};\n","export const LOGIN = \"login\"\nexport const EMPLOYEE_LIST = \"employee_list\"\nexport const LOGOUT = \"logout\"","export const employeeDetailsList = [{\n  \"id\": 1, \"name\": \"test1\", \"age\": \"11\", \"gender\": \"male\", \"email\": \"test1@gmail.com\", \"phoneNo\": \"9415346313\"\n}, {\n  \"id\": 2,\n  \"name\": \"test2\", \"age\": \"12\", \"gender\": \"male\", \"email\": \"test2@gmail.com\", \"phoneNo\": \"9415346314\"\n}, {\n  \"id\": 3,\n  \"name\": \"test3\",\n  \"age\": \"13\", \"gender\": \"male\", \"email\": \"test3@gmail.com\", \"phoneNo\": \"9415346315\"\n}, {\n  \"id\": 4,\n  \"name\": \"test4\", \"age\": \"14\", \"gender\": \"male\", \"email\": \"test4@gmail.com\", \"phoneNo\": \"9415346316\"\n}, {\n  \"id\": 5,\n  \"name\": \"test5\", \"age\": \"15\", \"gender\": \"male\", \"email\": \"test5@gmail.com\", \"phoneNo\": \"9415346317\"\n}, {\n  \"id\": 6,\n  \"name\": \"test6\", \"age\": \"16\", \"gender\": \"male\", \"email\": \"test6@gmail.com\", \"phoneNo\": \"9415346318\"\n}\n]\n","import { LOGIN, EMPLOYEE_LIST, LOGOUT } from './types'\nimport { employeeDetailsList } from './employeesList'\n\n//**************************** EDIT CMSLIST DATA ********************************************//\nexport const LoginActionCreator = (data) => async dispatch => {\n  dispatch({ type: LOGIN, payload: data });\n};\nexport const EmployeesListCreator = () => async dispatch => {\n  dispatch({ type: EMPLOYEE_LIST, payload: employeeDetailsList });\n};\nexport const Logout = () => async dispatch => {\n  dispatch({ type: LOGOUT, payload: '' });\n};\n\n\n","// Navigation routes for screens\nexport const BasicsPagesRoutes = {\n  LOGIN: \"/\",\n};\n\nexport const DashboardPageRoutes = {\n  EMPLOYEES_LIST: \"/employeesList\"\n}","import { toast } from \"react-toastify\";\ntoast.configure();\n//****************************************************************************************//\n//                              Email Validation\n//   **************************************************************************************//\nexport const validateUsername = (email) => {\n  let pattern = new RegExp(\n    /^(([^<>()\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  );\n  return pattern.test(email);\n};\n//****************************************************************************************//\n//                              Email Validation\n//   **************************************************************************************//\nexport const validatePassword = (pass) => {\n  let pattern = new RegExp(/^(?=.*[a-z])(?=.*[0-9])/);\n  return pattern.test(pass);\n};\n/*************************************************************************************\n                            Set success Toast Message\n  **************************************************************************************/\nexport const showSuccessToast = (msg) => {\n  toast.success(msg, {\n    position: \"top-right\",\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n  });\n};\n/*************************************************************************************\n                            Set Error Toast Message\n  **************************************************************************************/\nexport const showErrorToast = (msg) => {\n  toast.error(msg, {\n    position: \"top-right\",\n    autoClose: 4000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n  });\n};\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport const requireAuth = () => {\n  return localStorage.getItem(\"auth\") ? true : false;\n};\n// Authorization for Screens\nexport const ProtectedRoute = ({ component: Component, ...rest }) => {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        requireAuth() ? (\n          <Component {...props} />\n        ) : (\n            document.addEventListener(\"readystatechange\", event => {\n              if (event.target.readyState === \"complete\") {\n                window.location.href = \"/\";\n              }\n            })\n          )\n      }\n    />\n  )\n}","import { LOGIN, EMPLOYEE_LIST, LOGOUT } from '../actions'\nconst INTIAL_STATE = {\n    loginData: {},\n    employeeDetails: []\n}\nexport default (state = INTIAL_STATE, action) => {\n    switch (action.type) {\n        case LOGIN:\n            return Object.assign({}, state, { loginData: action.payload })\n        case EMPLOYEE_LIST:\n            return Object.assign({}, state, { employeeDetails: action.payload })\n\n        case LOGOUT:\n            return INTIAL_STATE\n        default:\n            return state;\n    }\n\n}","import { combineReducers } from 'redux';\nimport LoginReducer from './loginReducer';\n\n// Combine all reducers into root reducer\nexport default combineReducers({\n    reducer: LoginReducer\n});","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web and AsyncStorage for react-native\n\nimport reducers from \"../redux/reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nexport const store = createStore(\n  persistedReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport const persistor = persistStore(store);\n","import React, { lazy, Suspense } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { BasicsPagesRoutes, DashboardPageRoutes, ProtectedRoute } from './utlis'\nconst Login = lazy(() => import(\"./screens/login\"));\nconst EmployeesList = lazy(() => import(\"./screens/dashboard/employeesList\"));\n\n\nfunction AppRouting() {\n  return (\n    <React.Fragment>\n      <BrowserRouter>\n        <Switch>\n          <Suspense fallback={<div></div>}>\n            {/* Navigation of pages */}\n            <Route\n              exact\n              path={BasicsPagesRoutes.LOGIN}\n              component={Login}\n            />\n            <ProtectedRoute\n              exact\n              path={DashboardPageRoutes.EMPLOYEES_LIST}\n              component={EmployeesList}\n            />\n          </Suspense>\n          {/* End Navigation of pages */}\n        </Switch>\n      </BrowserRouter>\n    </React.Fragment>\n  )\n}\nexport default AppRouting","import React, { Component } from 'react';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./store\";\nimport AppRouting from \"./AppRouting\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <div className=\"App\">\n            {/* Routing  */}\n            <AppRouting />\n            {/* End Routing  */}\n          </div>\n        </PersistGate>\n      </Provider>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}